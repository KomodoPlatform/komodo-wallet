import 'dart:convert';
import 'package:easy_localization/easy_localization.dart';
import 'package:feedback/feedback.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:package_info_plus/package_info_plus.dart';
import 'package:web_dex/app_config/app_config.dart';
import 'package:web_dex/generated/codegen_loader.g.dart';

// The following environment variables must be set using dart-define:
// TRELLO_API_KEY: Your Trello API key
// TRELLO_TOKEN: Your Trello API token
// TRELLO_BOARD_ID: The ID of the Trello board where feedback will be sent
// TRELLO_LIST_ID: The ID of the Trello list where feedback will be sent

// The Trello API key can be obtained by going to the Power-Ups console:
// https://trello.com/power-ups/admin

// The Trello API token can be re-generated by going to:
// https://trello.com/1/authorize?expiration=never&name=Komodo%20Wallet%20Feedback&scope=read,write&response_type=token&key=YOUR_API_KEY
// If you have trouble for that, there will be an option in the power-up
// console to generate the link.
// The Trello board ID and list ID can be obtained by going to the Trello board
// and adding `.json` to the end of the URL.

// The environment variables can be set for the build using the following
// command for example:
// flutter build web --dart-define TRELLO_API_KEY=YOUR_KEY_HERE --dart-define TRELLO_TOKEN=YOUR_TOKEN_HERE --dart-define TRELLO_BOARD_ID=YOUR_BOARD_ID_HERE --dart-define TRELLO_LIST_ID=YOUR_LIST_ID_HERE

class FeedbackService {
  final String apiKey;
  final String token;
  final String boardId;
  final String listId;

  const FeedbackService({
    required this.apiKey,
    required this.token,
    required this.boardId,
    required this.listId,
  });

  static bool hasEnvironmentVariables() {
    final requiredVars = {
      'TRELLO_API_KEY': const String.fromEnvironment('TRELLO_API_KEY'),
      'TRELLO_TOKEN': const String.fromEnvironment('TRELLO_TOKEN'),
      'TRELLO_BOARD_ID': const String.fromEnvironment('TRELLO_BOARD_ID'),
      'TRELLO_LIST_ID': const String.fromEnvironment('TRELLO_LIST_ID')
    };

    final missingVars = requiredVars.entries
        .where((e) => e.value.isEmpty)
        .map((e) => e.key)
        .toList();

    if (missingVars.isNotEmpty) {
      debugPrint(
        'Missing required environment variables for feedback service: ${missingVars.join(", ")}',
      );
      return false;
    }

    return true;
  }

  /// Creates a FeedbackService instance if all required environment variables are set.
  /// Returns null if any environment variable is missing or empty.
  static FeedbackService? fromEnvironment() {
    if (!hasEnvironmentVariables()) {
      return null;
    }

    return FeedbackService(
      apiKey: const String.fromEnvironment('TRELLO_API_KEY'),
      token: const String.fromEnvironment('TRELLO_TOKEN'),
      boardId: const String.fromEnvironment('TRELLO_BOARD_ID'),
      listId: const String.fromEnvironment('TRELLO_LIST_ID'),
    );
  }

  Future<void> handleFeedback(UserFeedback feedback) async {
    PackageInfo packageInfo = await PackageInfo.fromPlatform();
    final Map<String, dynamic> metadata = {
      ...packageInfo.data,
    };

    try {
      await submitFeedback(
        description: feedback.text,
        screenshot: feedback.screenshot,
        type: 'User Feedback',
        metadata: metadata,
      );

      final theme = Theme.of(scaffoldKey.currentContext!);

      ScaffoldMessenger.of(scaffoldKey.currentContext!).showSnackBar(
        SnackBar(
          content: Text(
            'Thank you! ${LocaleKeys.feedbackFormDescription.tr()}',
            style: theme.textTheme.bodyLarge?.copyWith(
              color: theme.colorScheme.onPrimaryContainer,
            ),
          ),
          backgroundColor: theme.colorScheme.primaryContainer,
          action: SnackBarAction(
            label: LocaleKeys.addMoreFeedback.tr(),
            textColor: theme.colorScheme.onPrimaryContainer,
            onPressed: () => scaffoldKey.currentContext!.showFeedback(),
          ),
          duration: const Duration(seconds: 5),
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
        ),
      );
    } catch (e) {
      debugPrint('Failed to submit feedback: $e');
      rethrow;
    }
  }

  Future<void> submitFeedback({
    required String description,
    required Uint8List screenshot,
    required String type,
    required Map<String, dynamic> metadata,
  }) async {
    try {
      // 1. Create the card
      final cardResponse = await http.post(
        Uri.parse('https://api.trello.com/1/cards'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'idList': listId,
          'key': apiKey,
          'token': token,
          'name': 'Feedback: $type',
          'desc': '''
Description:
$description

Device Info:
${metadata.entries.map((e) => '${e.key}: ${e.value}').join('\n')}
''',
        }),
      );

      if (cardResponse.statusCode != 200) {
        throw Exception(
            'Failed to create Trello card (${cardResponse.statusCode}): ${cardResponse.body}');
      }

      final cardId = jsonDecode(cardResponse.body)['id'];

      // 2. Attach the screenshot to the card
      final attachmentRequest = http.MultipartRequest(
        'POST',
        Uri.parse('https://api.trello.com/1/cards/$cardId/attachments'),
      );

      attachmentRequest.fields.addAll({
        'key': apiKey,
        'token': token,
      });

      attachmentRequest.files.add(
        http.MultipartFile.fromBytes(
          'file',
          screenshot,
          filename: 'screenshot.png',
        ),
      );

      final attachmentResponse = await attachmentRequest.send();
      final streamedResponse =
          await http.Response.fromStream(attachmentResponse);

      if (streamedResponse.statusCode != 200) {
        throw Exception(
          'Failed to attach screenshot (${streamedResponse.statusCode}): ${streamedResponse.body}',
        );
      }
    } catch (e) {
      debugPrint('Error in submitFeedback: $e');
      rethrow;
    }
  }
}

extension BuildContextShowFeedback on BuildContext {
  /// Shows the feedback dialog if the feedback service is available.
  /// Does nothing if the feedback service is not configured.
  void showFeedback() {
    final feedbackService = FeedbackService.fromEnvironment();
    if (feedbackService == null) {
      debugPrint(
          'Feedback dialog not shown: feedback service is not configured');
      return;
    }

    BetterFeedback.of(this).show(
      feedbackService.handleFeedback,
    );
  }

  /// Returns true if feedback functionality is available
  bool get isFeedbackAvailable => FeedbackService.hasEnvironmentVariables();
}
