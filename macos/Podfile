require 'xcodeproj'

# Use the CocoaPods CDN source for faster and more reliable dependency resolution
source 'https://cdn.cocoapods.org/'

def deployment_target
  project_path = 'Runner.xcodeproj'
  project = Xcodeproj::Project.open(project_path)
  target = project.targets.first
  target.build_configurations.first.build_settings['MACOSX_DEPLOYMENT_TARGET']
end

platform :osx, deployment_target

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'ephemeral', 'Flutter-Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure \"flutter pub get\" is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Flutter-Generated.xcconfig, then run \"flutter pub get\""
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_macos_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_macos_pods File.dirname(File.realpath(__FILE__))
  # target 'RunnerTests' do
  #   inherit! :search_paths
  # end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_macos_build_settings(target)
    target.build_configurations.each do |config|
      config.build_settings['MACOSX_DEPLOYMENT_TARGET'] = deployment_target
      # Ensure timestamped, hardened runtime code signing for all pods and Runner
      existing = config.build_settings['OTHER_CODE_SIGN_FLAGS']
      flags = existing ? Array(existing) : []
      flags << '--timestamp=auto'
      flags << '--options=runtime'
      config.build_settings['OTHER_CODE_SIGN_FLAGS'] = flags.uniq
    end
  end
  
  # Use $(ARCHS_STANDARD) (arm64 + x86_64) to produce a universal macOS build.
  # Debug builds: build only the active architecture to speed up local development.
  # TODO: If we encounter arch/linker errors from pods missing x86_64 slices (often vendored/prebuilt),
  # exclude x86_64 for affected configs or switch Release to arm64-only.
  installer.pods_project.build_configurations.each do |config|
    config.build_settings['ARCHS'] = '$(ARCHS_STANDARD)'
    if config.name == 'Debug'
      config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
    else
      config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
    end
  end
end
